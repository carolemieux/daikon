<std.block()int:::ENTER>
  <::next_pid >= 0 {0-}, ::next_pid >= 0 {1+}> (UInt,SUJ)
<std.block()int:::EXIT>
  <::next_pid >= 0 {0-}, ::next_pid >= 0 {1+}> (UInt,SUJ)
<std.enqueue(int;process *;)int:::ENTER>
  <prio >= 0 {1+}, prio >= -1 {1+}> (UInt,DJJ)
<std.enqueue(int;process *;)int:::EXIT>
  <null, (return == 0)  ==>  (return is a pointer) {1+}> (NInt,MJ)
  <null, (return == 0)  ==>  (prio >= 0) {1+}> (NInt,MJ)
  <null, (return == -4)  ==>  (prio != 0) {0.9999+}> (NInt,MJ)
  <prio >= 0 {1+}, prio >= -1 {1+}> (UInt,DJJ)
  <return == 0 {1+}, return one of { -4, 0 } {1+}> (UInt,DJJ)
<std.exit_here(int;)int:::ENTER>
<std.exit_here(int;)int:::EXIT>
<std.finish()int:::ENTER>
<std.finish()int:::EXIT>
<std.flush()int:::ENTER>
<std.flush()int:::EXIT>
<std.get_command(int *;int *;float *;)int:::ENTER>
  <*command != 0 {1+}, null> (UInt,JM)
<std.get_command(int *;int *;float *;)int:::EXIT>
  <(return == 1)  ==>  (*prio != 0) {1+}, null> (NInt,JM)
  <null, (orig(*command) == 0) ==> (*command == 0) {1+}> (Bin,MJ)
  <(*prio == 0) ==> (orig(*prio) == 0) {1+}, null> (Bin,JM)
  <*command != 0 {1+}, null> (UInt,JM)
<std.get_current()process *:::ENTER>
  <::next_pid >= 0 {0.4444-}, ::next_pid >= 0 {1+}> (UInt,SUJ)
<std.get_current()process *:::EXIT>
  <::next_pid >= 0 {0.4444-}, ::next_pid >= 0 {1+}> (UInt,SUJ)
<std.get_process(int;float;process **;)int:::ENTER>
  <ratio >= 0.0 {1+}, ratio >= -1.0 {0.0721-}> (UInt,DJU)
<std.get_process(int;float;process **;)int:::EXIT>
  <ratio >= 0.0 {1+}, ratio >= -1.0 {0.0721-}> (UInt,DJU)
<std.main(int;char **;)int:::ENTER>
<std.main(int;char **;)int:::EXIT>
<std.new_job(int;)int:::ENTER>
<std.new_job(int;)int:::EXIT>
  <null, ::next_pid >= orig(::next_pid) {1+}> (Bin,MJ)
  <::next_pid - orig(::next_pid) - 1 == 0 {1+}, null> (Bin,JM)
  <null, (::next_pid == 0) ==> (orig(::next_pid) == 0) {1+}> (Bin,MJ)
  <::next_pid >= 1 {1+}, ::next_pid >= 0 {0.3333-}> (UInt,DJU)
  <return == 0  (mod 0) {0-}, return == 0  (mod 4) {1+}> (UInt,DUJ)
  <return == 0 {1+}, return one of { -4, 0 } {1+}> (UInt,DJJ)
<std.put_end(int;process *;)int:::ENTER>
  <prio >= 0 {1+}, prio >= -1 {1+}> (UInt,DJJ)
<std.put_end(int;process *;)int:::EXIT>
  <null, (return == 0)  ==>  (return is a pointer) {1+}> (NInt,MJ)
  <null, (return == 0)  ==>  (prio >= 0) {1+}> (NInt,MJ)
  <null, (return == -4)  ==>  (prio != 0) {0.9999+}> (NInt,MJ)
  <prio >= 0 {1+}, prio >= -1 {1+}> (UInt,DJJ)
  <return == 0 {1+}, return one of { -4, 0 } {1+}> (UInt,DJJ)
<std.quantum_expire()int:::ENTER>
<std.quantum_expire()int:::EXIT>
<std.reschedule(int;)int:::ENTER>
<std.reschedule(int;)int:::EXIT>
<std.schedule(int;int;float;)int:::ENTER>
  <command != 0 {1+}, null> (UInt,JM)
  <prio != 0 {1+}, null> (UInt,JM)
<std.schedule(int;int;float;)int:::EXIT>
  <return == 0  (mod 2) {1+}, null> (UInt,JM)
  <command != 0 {1+}, null> (UInt,JM)
  <prio != 0 {1+}, null> (UInt,JM)
<std.unblock(float;)int:::ENTER>
  <ratio != 0 {0-}, ratio != 0 {1+}> (UInt,SUJ)
<std.unblock(float;)int:::EXIT>
  <ratio != 0 {0-}, ratio != 0 {1+}> (UInt,SUJ)
  <return == 0 {1+}, return one of { -5, 0 } {1+}> (UInt,DJJ)
<std.upgrade_prio(int;float;)int:::ENTER>
  <::next_pid >= 0 {1+}, ::next_pid >= 0 {0.7779-}> (UInt,SJU)
  <ratio != 0 {0-}, ratio != 0 {1+}> (UInt,SUJ)
<std.upgrade_prio(int;float;)int:::EXIT>
  <::next_pid >= 0 {1+}, ::next_pid >= 0 {0.7779-}> (UInt,SJU)
  <ratio != 0 {0-}, ratio != 0 {1+}> (UInt,SUJ)
